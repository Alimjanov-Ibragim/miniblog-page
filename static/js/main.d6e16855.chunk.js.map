{"version":3,"sources":["components/Notes/Notes.js","components/Comments/Comments.js","components/Note/Note.js","App.js","serviceWorker.js","index.js"],"names":["Notes","props","handleInputTitle","event","setState","title","target","value","handleInputShort","shortDesc","handleInputDesc","description","handleButton","notesArrayCopy","state","notesArray","notesArrayId","length","push","id","countComments","comments","name","text","localStorage","setItem","JSON","stringify","handleDelete","listCopy","splice","data","parse","getItem","bind","className","this","map","note","index","key","to","onClick","htmlFor","type","onChange","placeholder","Component","Comments","handleInputName","handleInput","listArray","listId","commentCopyArray","allNotes","comId","noteId","Note","match","params","noteArray","copyNoteArray","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6e16855.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./Notes.css\";\n\nexport default class Notes extends Component {\n  constructor(props) {\n    super(props);\n    const data = JSON.parse(localStorage.getItem(\"notesArray\"));\n\n    this.state = {\n      title: \"\",\n      shortDesc: \"\",\n      description: \"\",\n      notesArray: data\n        ? data\n        : [\n            {\n              id: 1,\n              title: \"Как выучить React 1\",\n              shortDesc: \"Тестовое краткое описание\",\n              description: \"Тестовое полное описание\",\n              countComments: 2,\n              comments: [\n                {\n                  id: 1,\n                  name: \"Ibragim\",\n                  text: \"sdfsdfls liemre lsdsf albdsbn\"\n                },\n                {\n                  id: 2,\n                  name: \"Kobe\",\n                  text: \"gthfdfdgdfls liemre lsdsf albdsbn\"\n                }\n              ]\n            },\n            {\n              id: 2,\n              title: \"Как выучить React 2\",\n              shortDesc: \"Тестовое краткое описание\",\n              description: \"Тестовое полное описание\",\n              countComments: 2,\n              comments: [\n                {\n                  id: 1,\n                  name: \"Ibragim 2\",\n                  text: \"sdfsdfls liemre lsdsf albdsbn\"\n                },\n                {\n                  id: 2,\n                  name: \"Kobe 2\",\n                  text: \"gthfdfdgdfls liemre lsdsf albdsbn\"\n                }\n              ]\n            },\n            {\n              id: 3,\n              title: \"Как выучить React 3\",\n              shortDesc: \"Тестовое краткое описание\",\n              description: \"Тестовое полное описание\",\n              countComments: 2,\n              comments: [\n                {\n                  id: 1,\n                  name: \"Ibragim 3\",\n                  text: \"sdfsdfls liemre lsdsf albdsbn\"\n                },\n                {\n                  id: 2,\n                  name: \"Kobe 3\",\n                  text: \"gthfdfdgdfls liemre lsdsf albdsbn\"\n                }\n              ]\n            }\n          ]\n    };\n\n    this.handleInputTitle = this.handleInputTitle.bind(this);\n    this.handleInputShort = this.handleInputShort.bind(this);\n    this.handleInputDesc = this.handleInputDesc.bind(this);\n    this.handleButton = this.handleButton.bind(this);\n\n    localStorage.setItem(\"notesArray\", JSON.stringify(this.state.notesArray));\n  }\n\n  handleInputTitle = event => {\n    this.setState({\n      title: event.target.value\n    });\n  };\n\n  handleInputShort = event => {\n    this.setState({\n      shortDesc: event.target.value\n    });\n  };\n\n  handleInputDesc = event => {\n    this.setState({\n      description: event.target.value\n    });\n  };\n\n  handleButton = () => {\n    let notesArrayCopy = [...this.state.notesArray];\n    let notesArrayId = this.state.notesArray.length + 1;\n    notesArrayCopy.push({\n      id: notesArrayId,\n      title: this.state.title,\n      shortDesc: this.state.shortDesc,\n      description: this.state.description,\n      countComments: 0,\n      comments: [\n        {\n          id: 0,\n          name: \"Пусто\",\n          text: \"\"\n        }\n      ]\n    });\n    this.setState({\n      notesArray: notesArrayCopy,\n      title: \"\",\n      shortDesc: \"\",\n      description: \"\"\n    });\n    localStorage.setItem(\"notesArray\", JSON.stringify(notesArrayCopy));\n  };\n\n  handleDelete = props => {\n    let listCopy = this.state.notesArray;\n    listCopy.splice(props, 1);\n    this.setState({\n      notesArray: listCopy\n    });\n\n    // let commentCopyArray = [...this.state.allNotes];\n    // let comId = this.state.noteId - 1;\n    // commentCopyArray[comId].comments.splice(props, 1);\n\n    localStorage.setItem(\"notesArray\", JSON.stringify(listCopy));\n  };\n\n  render() {\n    return (\n      <div className=\"Notes\">\n        <h1>Добро пожаловать на мой Мини блог</h1>\n        <div className=\"Notes-lists\">\n          {this.state.notesArray.map((note, index) => (\n            <div className=\"Notes-col\" key={note.title}>\n              <div className=\"Notes-list\">\n                <NavLink to={\"/\" + note.id}>\n                  <div className=\"Notes-title\">{note.title}</div>\n                </NavLink>\n                <div className=\"Notes-shortDesc\">{note.shortDesc}</div>\n                <div className=\"Notes-countComments\">\n                  Число комментариев: <span>{note.countComments}</span>\n                </div>\n                <div\n                  className=\"Notes-delete\"\n                  onClick={() => this.handleDelete(index)}\n                >\n                  Удалить\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n        <div className=\"Notes-add\">\n          <div className=\"Notes-add-title\">Добавить запись</div>\n          <div className=\"Notes-add-elements\">\n            <label htmlFor=\"title\">Заголовок</label>\n            <input\n              id=\"title\"\n              type=\"text\"\n              className=\"Notes-add-input\"\n              value={this.state.title}\n              onChange={this.handleInputTitle}\n            />\n            <label htmlFor=\"shortDesc\">Короткое описание</label>\n            <textarea\n              id=\"shortDesc\"\n              className=\"Notes-add-textarea\"\n              value={this.state.shortDesc}\n              onChange={this.handleInputShort}\n            />\n            <label htmlFor=\"description\">Полное описание</label>\n            <textarea\n              id=\"description\"\n              className=\"Notes-add-textarea\"\n              value={this.state.description}\n              onChange={this.handleInputDesc}\n            />\n            <input\n              type=\"button\"\n              className=\"Notes-add-button\"\n              onClick={this.handleButton}\n              value=\"Добавить\"\n              placeholder=\"Добавить\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./Comments.css\";\n\nexport default class Comments extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      value: \"\",\n      noteId: this.props.noteId,\n      listArray: this.props.comments,\n      allNotes: this.props.allNotes\n    };\n\n    this.handleInput = this.handleInput.bind(this);\n    this.handleInputName = this.handleInputName.bind(this);\n    this.handleButton = this.handleButton.bind(this);\n  }\n\n  handleInputName = event => {\n    this.setState({\n      name: event.target.value\n    });\n  };\n\n  handleInput = event => {\n    this.setState({\n      value: event.target.value\n    });\n  };\n\n  handleButton = () => {\n    let listCopy = [...this.state.listArray];\n    let listId = listCopy.length + 1;\n    listCopy.push({\n      id: listId,\n      name: this.state.name,\n      text: this.state.value\n    });\n    this.setState({\n      listArray: listCopy,\n      name: \"\",\n      value: \"\"\n    });\n\n    let commentCopyArray = [...this.state.allNotes];\n    let comId = this.state.noteId - 1;\n    commentCopyArray[comId].comments.push({\n      id: listId,\n      name: this.state.name,\n      text: this.state.value\n    });\n    commentCopyArray[comId].countComments =\n      commentCopyArray[comId].comments.length;\n\n    localStorage.setItem(\"notesArray\", JSON.stringify(commentCopyArray));\n  };\n\n  handleDelete = props => {\n    let listCopy = this.state.listArray;\n    listCopy.splice(props, 1);\n    this.setState({\n      listArray: listCopy\n    });\n\n    let commentCopyArray = [...this.state.allNotes];\n    let comId = this.state.noteId - 1;\n    commentCopyArray[comId].comments.splice(props, 1);\n\n    commentCopyArray[comId].countComments =\n      commentCopyArray[comId].comments.length;\n\n    localStorage.setItem(\"notesArray\", JSON.stringify(commentCopyArray));\n  };\n\n  render() {\n    return (\n      <div className=\"Comments\">\n        <div className=\"Comments-title list\">Список комментариев</div>\n        <ul className=\"Comments-ul\">\n          {this.state.listArray.length > 0 ? (\n            this.state.listArray.map((note, index) => (\n              <li key={index}>\n                <div className=\"Comments-name\">{note.name}</div>\n                <div className=\"Comments-text\">{note.text}</div>\n                <div\n                  className=\"Comments-delete\"\n                  onClick={() => this.handleDelete(index)}\n                >\n                  Удалить\n                </div>\n              </li>\n            ))\n          ) : (\n            <div>Пусто</div>\n          )}\n        </ul>\n        <div className=\"Comments-title\">Оставить комментарий</div>\n        <div className=\"Comments-elements\">\n          <label htmlFor=\"name\">Имя</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            className=\"Comments-input\"\n            value={this.state.name}\n            onChange={this.handleInputName}\n          />\n          <label htmlFor=\"comment\">Текст</label>\n          <textarea\n            id=\"comment\"\n            className=\"Comments-textarea\"\n            value={this.state.value}\n            onChange={this.handleInput}\n          />\n          <input\n            type=\"button\"\n            className=\"Comments-button\"\n            onClick={this.handleButton}\n            value=\"Добавить\"\n            placeholder=\"Добавить\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Comments from \"./../Comments/Comments\";\nimport \"./Note.css\";\n\nexport default class Note extends Component {\n  constructor(props) {\n    super(props);\n    const data = JSON.parse(localStorage.getItem(\"notesArray\"));\n    let noteId = this.props.match.params.id;\n    let noteArray = data.splice(noteId - 1, 1);\n    this.state = {\n      allNotes: JSON.parse(localStorage.getItem(\"notesArray\")),\n      copyNoteArray: noteArray\n    };\n  }\n  render() {\n    return (\n      <div className=\"Note\">\n        <h1 className=\"Note-title\">{this.state.copyNoteArray[0].title}</h1>\n        <div className=\"Note-description\">\n          {this.state.copyNoteArray[0].description}\n        </div>\n        <Comments\n          comments={this.state.copyNoteArray[0].comments}\n          noteId={this.state.copyNoteArray[0].id}\n          allNotes={this.state.allNotes}\n        />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Route, BrowserRouter } from \"react-router-dom\";\nimport \"./App.css\";\nimport Notes from \"./components/Notes/Notes\";\nimport Note from \"./components/Note/Note\";\n\nconst App = () => (\n  <BrowserRouter>\n    <div className=\"App\">\n      <Route exact path=\"/\" component={Notes} />\n      <Route exact path=\"/:id\" component={Note} />\n    </div>\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}